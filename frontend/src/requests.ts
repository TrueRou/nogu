import createClient, { type Middleware } from "openapi-fetch";
import type { paths } from "./schemas/schema"; // generated by openapi-typescript
import { useGlobal } from "./store/global";
import router from "./routes";
import { markRaw } from "vue";
import login from "./pages/auth/login.vue";

const myMiddleware: Middleware = {
    async onRequest(req, options) {
        const accessToken = localStorage.getItem("accessToken")
        if (accessToken !== null) {
            // we don't expire the token, so we can always use it
            req.headers.set("Authorization", `Bearer ${accessToken}`);
        }
        return undefined; // return undefined to leave request unchanged
    },
    async onResponse(res, options) {
        const global = useGlobal()
        const data = await res.json()
        if (res.status === 400) {
            global.showNotification("error", data.message)
            if (res.headers.get("fastapi-users")) {
                localStorage.removeItem("accessToken");
                if (router.currentRoute.value.meta.requiresAuth) {
                    global.openDialog(markRaw(login))
                }
            }
        }
        return undefined; // return undefined to leave response unchanged
    },
};

export const client = createClient<paths>({ baseUrl: import.meta.env.VITE_URL });
client.use(myMiddleware);